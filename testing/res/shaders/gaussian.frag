#version 330 core

// https://learnopengl.com/Advanced-Lighting/Bloom
// https://observablehq.com/@jobleonard/gaussian-kernel-calculater

out vec4 frag_colour;

in vec2 frag_coord;
in vec3 frag_mod_colour;

uniform sampler2D u_texture_0;
uniform bool u_horizontal;

const float KERNEL[41] = float[] (
    0.0000000055382908253428,
    0.0000013301874550985185,
    0.00000420142851607206,
    0.000012470755639253391,
    0.00003478559483747712,
    0.00009118339841010028,
    0.00022461574370663984,
    0.0005199609656313381,
    0.0011311109213825953,
    0.0023122840561290727,
    0.004441977612900552,
    0.008018786489204765,
    0.013603055398253084,
    0.02168497960533098,
    0.03248451979357155,
    0.04572880015715078,
    0.06049236455859283,
    0.07519858078922247,
    0.08784484506041812,
    0.09643147326297417,
    0.09947655690520707,
    0.09643147326297417,
    0.08784484506041812,
    0.07519858078922247,
    0.06049236455859283,
    0.04572880015715078,
    0.03248451979357155,
    0.02168497960533098,
    0.013603055398253084,
    0.008018786489204765,
    0.004441977612900552,
    0.0023122840561290727,
    0.0011311109213825953,
    0.0005199609656313381,
    0.00022461574370663984,
    0.00009118339841010028,
    0.00003478559483747712,
    0.000012470755639253391,
    0.00000420142851607206,
    0.0000013301874550985185,
    0.0000000055382908253428
);

void main() {
	vec2 px_size = 1.0 / textureSize(u_texture_0, 0);

    vec4 out_colour = vec4(0.0);

    for (int i = 0; i < 40; i++) {
        if (u_horizontal) {
            out_colour += texture(u_texture_0, frag_coord + vec2(px_size.x * (i - 20), 0.0)) * KERNEL[i];
        } else {
            out_colour += texture(u_texture_0, frag_coord + vec2(0.0, px_size.y * (i - 20))) * KERNEL[i];
        }
    }

    frag_colour = out_colour;
}
