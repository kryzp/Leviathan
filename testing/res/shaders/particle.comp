#version 430

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D o_trail_map;

struct Particle
{
	float x, y;
	float ang;
};

#define PARTICLE_COUNT 500000

layout(std430, binding = 1) buffer particle_data
{
	Particle particles[PARTICLE_COUNT];
};

uint hash(uint state)
{
	state ^= 2747636419u;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	return state;
}

float uint_zero_to_one(uint x)
{
	return float(x) / 4294967295.0;
}

uniform float u_delta_time = 0.0;
uniform vec2 u_mouse_pos = vec2(0.0, 0.0);
uniform bool u_mouse_pressed = false;

const float QUARTER = 1.57079632679;
const float PI = 3.14159265359;
const float TAU = 6.28318530718;
const float move_speed = 50.0;

void main()
{
	ivec2 size = imageSize(o_trail_map);
	uint id = gl_GlobalInvocationID.x;

	if (id < 0 || id >= PARTICLE_COUNT) {
		return;
	}

	Particle particle = particles[id];
	uint rand = hash(uint(particle.y * size.x) + uint(particle.x) + hash(id));
	float randf = uint_zero_to_one(rand);

	if (u_mouse_pressed)
	{
		vec2 diff = u_mouse_pos - vec2(particles[id].x, particles[id].y);
		float lensqr = diff.x*diff.x + diff.y*diff.y;

		if (lensqr < 10000.0)
			particles[id].ang = atan(diff.y, diff.x);
	}

	vec2 dir = vec2(cos(particle.ang), sin(particle.ang));
	vec2 newpos = vec2(particle.x, particle.y) + (dir * move_speed * u_delta_time);

	if (newpos.x < 0 || newpos.x >= size.x || newpos.y < 0 || newpos.y >= size.y)
	{
		// yes
		if (newpos.y < 0) {
			particles[id].ang = (randf * PI);
		} else if (newpos.y >= size.y) {
			particles[id].ang = (randf * PI) + PI;
		} else if (newpos.x < 0) {
			if (randf > 0.5) {
				particles[id].ang = TAU - (randf * QUARTER);
			} else {
				particles[id].ang = randf * QUARTER;
			}
		} else if (newpos.x >= size.x) {
			particles[id].ang = (randf * PI) + QUARTER;
		}

		newpos.x = clamp(newpos.x, 0.0, size.x - 0.01);
		newpos.y = clamp(newpos.y, 0.0, size.y - 0.01);
	}

	particles[id].x = newpos.x;
	particles[id].y = newpos.y;
	imageStore(o_trail_map, ivec2(newpos.x, newpos.y), vec4(1.0));
}
