inheritance or component?
i think a mix of both might be nice.
i like components but i think it feels too limiting sometimes. same goes for inheritance...
maybe a selection of structs which you just add into a class inheriting from entity?
like this:

class Entity
{
	// random utility functions + virtual functions for update and render etc...
};

class Collider
{
	// collision stuff, physics, intersection detection + resolution, ...
};

class Sprite
{
	// sprite, render, animation, gfx, ...
};

class Health
{
	// health management utilities, ...
};

class Player : public Entity
{
	// update function override...
	// render function override...

	Collider* col; // then the developer can choose how to run them!
	Sprite* spr;
	Health* hp;

	// the disadvantage is that you can't easily check what components an entity has but i think that could just be solved by storing a bitflag in each entity and then setting that manually
	// seems a lot less intrusive and its the way i like to code entity systems nowadays...
	// hopefuly other people are ok with this, if they arent i might just move this into the 'ext' folder and let people code their own entity systems...
	// this just seems like a solution which could leave lots of room for expansion! maybe we dont even need the entity and player classes, just these 'utility' classes like Sprite and Collider and let people
	// choose how they want to structure their entity system? :)
};

// another disadvantage would be selecting a component from an entity but this could just be solved by casting the entity to what you want.
// maybe an override function in the entity class which returns a string which identifies the entity name? that way you could:

Entity* entity = select_random_entity();
if (entity.name() == "Player")
{
	Player* player = (Player*)entity;
	player->hp->take_damage();
	player->spr->play_animation("hurt");
}
